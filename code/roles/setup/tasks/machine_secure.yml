---
# Stop and disable ufw before installing firewalld ...
- name: Check if ufw is installed.
  stat: path="/usr/sbin/ufw"
  register: ufw_installed

- name: Check if ufw status is active.
  command: ufw status
  changed_when: False
  register: ufw_status
  when: ufw_installed.stat.exists

- name: Disable ufw ruleset if ufw is installed and active.
  ufw:
    state: reset
  when: ufw_installed.stat.exists and 'inactive' not in ufw_status.stdout

- name: Flush any existing (ufw) nftables ruleset.
  command: nft flush ruleset
  when: ufw_installed.stat.exists and 'inactive' not in ufw_status.stdout

- name: Stop and disable the ufw service.
  service:
    name: ufw
    state: stopped
    enabled: no
  when: ufw_installed.stat.exists

- name: Set ssh port number
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: 'Port '
    line: 'Port {{ ssh_port }}'
    state: present
  notify:
    - restart sshd

# Set sudo password timeout (default is 15 minutes)
- name: Set sudo password timeout.
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults\tenv_reset'
    line: 'Defaults    env_reset, timestamp_timeout={{ sudo_timeout }}'
    validate: '/usr/sbin/visudo -cf %s'

- name: Disable tunneled clear-text passwords.
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
  notify:
    - restart sshd

# Configure a firewall, using firewalld
- name: "Check if the firewalld public zone is active for interface: {{ ansible_default_ipv4.interface }}."
  command: firewall-cmd --get-zone-of-interface={{ ansible_default_ipv4.interface }}
  register: zone_status
  failed_when: zone_status.rc != 0 and zone_status.rc != 2
  changed_when: zone_status.rc == 2

- name: Set the default firewalld public zone to active if not already active.
  command: firewall-cmd --permanent --zone=public --change-interface={{ ansible_default_ipv4.interface }}
  when: '"public" not in zone_status.stdout'
  notify:
    - restart firewalld

- name: Enable the firewalld ssh port (which may be different than port 22).
  firewalld:
    zone: public
    port: "{{ ssh_port }}/tcp"
    state: enabled
    permanent: yes
  notify:
    - restart firewalld

- name: Disable firewalld dhcpv6-client and ssh service.
  firewalld:
    zone: public
    service: "{{ item }}"
    state: disabled
    permanent: yes
  with_items:
    - dhcpv6-client
    - ssh
  notify:
    - restart firewalld

- name: Configure fail2ban local jail.
  copy:
    dest: /etc/fail2ban/jail.local
    content: "{{ f2b_jail_local }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart fail2ban

# simple shell script to display fail2ban-client status info;
# example usage:
#   f2bst
#   f2bst sshd
- name: Create f2bst shell script.
  copy:
    dest: /usr/local/bin/f2bst
    content: |
      #!/usr/bin/sh
      fail2ban-client status $*
    owner: root
    group: root
    mode: 0755

- name: Check if a reboot is needed for Debian-based systems
  stat:
    path: /var/run/reboot-required
  register: reboot_required

- name: Check if any services needs to be restarted.
  command: needrestart -r a
  when: upgrade.changed and reboot_required.stat.exists == false

- name: Reboot the server if needed.
  reboot:
    msg: "Reboot initiated by Ansible because of reboot required file."
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: reboot_required.stat.exists

